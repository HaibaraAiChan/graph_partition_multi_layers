main start at this time 1643937746.8179402
karate data
#nodes: 34
#edges: 156
#classes: 2
success----------------------------------------
24
5
5
Epoch 0
 layer edges length  53
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
Epoch 1
 layer edges length  53
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
Epoch 2
 layer edges length  55
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
Epoch 3
 layer edges length  53
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
Epoch 4
 layer edges length  53
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
Epoch 5
 layer edges length  57
--------------------------------------------------
 layer edges length  47
--------------------------------------------------
$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-$-
========after full batch subgraphs of data loading===================================================
6
Epoch 0
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 6, 22,  0, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 6, 22,  0, 24])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([ 1, 11,  0, 33])
tensor([ 0, 21,  8])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 3},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([25, 24,  6])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([25, 24,  6])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([32, 33,  1])
tensor([22, 19, 14])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([10,  0, 25, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([10,  0, 25, 24])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 2,  0, 32, 33])
tensor([ 1, 15,  9])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([ 0,  6, 23, 21, 26, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([ 0,  6, 23, 21, 26, 24])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([ 0,  1, 13,  7, 25, 33])
tensor([17,  2, 23])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([ 0, 14, 17, 12])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([ 0, 14, 17, 12])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([ 0, 12, 10,  3])
tensor([ 3,  4, 12])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=5, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([17,  0, 25, 24, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([17,  0, 25, 24, 15])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([10,  0, 32, 33,  5])
tensor([ 5, 18, 10])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([ 0, 20, 25, 24, 15, 18])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([ 0, 20, 25, 24, 15, 18])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([ 0, 16, 32, 33,  5,  6])
tensor([ 6, 20, 16])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([12,  6,  0, 24, 10])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([12,  6,  0, 24, 10])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([ 3,  1,  0, 33,  2])
tensor([ 7, 11, 13])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 11},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 9},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 11},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2,  6, 22, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2,  6, 22, 24]), '_N_src': tensor([14, 15,  0,  6, 25, 21,  4, 28, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2,  6, 22, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2,  6, 22, 24]), '_N_src': tensor([14, 15,  0,  6, 25, 21,  4, 28, 29])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2,  6, 22, 24])
tensor([12,  5,  0,  1, 32,  7, 19, 31, 29])
tensor([ 0, 21,  8,  1, 11, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=6, num_edges=11)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 10},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 25, 24,  6]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 25, 24,  6]), '_N_src': tensor([25, 24,  0,  6, 10, 30, 28, 29, 21,  4])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 0, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 25, 24,  6]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 25, 24,  6]), '_N_src': tensor([25, 24,  0,  6, 10, 30, 28, 29, 21,  4])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 25, 24,  6])
tensor([32, 33,  0,  1,  2, 30, 31, 29,  7, 19])
tensor([22, 19, 14, 32, 33,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=6, num_edges=12)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 12},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 10,  0, 25, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 10,  0, 25, 24]), '_N_src': tensor([21,  4, 25, 24, 10, 27,  0, 14, 15, 30, 28, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8, 10,  0, 25, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8, 10,  0, 25, 24]), '_N_src': tensor([21,  4, 25, 24, 10, 27,  0, 14, 15, 30, 28, 29])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8, 10,  0, 25, 24])
tensor([ 7, 19, 32, 33,  2, 27,  0, 12,  5, 30, 31, 29])
tensor([ 1, 15,  9,  2,  0, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=15, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 9, '_N_src': 13},
      num_dst_nodes={'_N_dst': 9, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11,  0,  6, 23, 21, 26, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11,  0,  6, 23, 21, 26, 24]), '_N_src': tensor([ 0,  6, 27, 24, 26, 14, 15, 21,  4, 10, 31, 28, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11,  0,  6, 23, 21, 26, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11,  0,  6, 23, 21, 26, 24]), '_N_src': tensor([ 0,  6, 27, 24, 26, 14, 15, 21,  4, 10, 31, 28, 29])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11,  0,  6, 23, 21, 26, 24])
tensor([ 0,  1, 27, 33, 25, 12,  5,  7, 19,  2, 24, 31, 29])
tensor([17,  2, 23,  0,  1, 13,  7, 25, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=9, num_edges=18)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 10},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 5, '_N_src': 7},
      num_dst_nodes={'_N_dst': 5, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 10},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14,  0, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14,  0, 17]), '_N_src': tensor([23, 21, 18,  0, 12, 14, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14,  0, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14,  0, 17]), '_N_src': tensor([23, 21, 18,  0, 12, 14, 15])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14,  0, 17])
tensor([13,  7,  6,  0,  3, 12,  5])
tensor([ 3,  4, 12,  0, 10])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=5, num_edges=10)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 10},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  0, 25, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  0, 25, 24]), '_N_src': tensor([ 0, 18, 25, 24, 15, 14, 10, 30, 28, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 1, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17,  0, 25, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17,  0, 25, 24]), '_N_src': tensor([ 0, 18, 25, 24, 15, 14, 10, 30, 28, 29])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17,  0, 25, 24])
tensor([ 0,  6, 32, 33,  5, 12,  2, 30, 31, 29])
tensor([ 5, 18, 10,  0, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=6, num_edges=12)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20,  0, 25, 24, 15]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20,  0, 25, 24, 15]), '_N_src': tensor([15,  0, 25, 24, 18, 14, 10, 30, 28, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 1, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20,  0, 25, 24, 15]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20,  0, 25, 24, 15]), '_N_src': tensor([15,  0, 25, 24, 18, 14, 10, 30, 28, 29])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20,  0, 25, 24, 15])
tensor([ 5,  0, 32, 33,  6, 12,  2, 30, 31, 29])
tensor([ 6, 20, 16,  0, 32, 33,  5])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25])
{'_ID': tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([ 0, 21,  8, 22, 19, 14,  1, 15,  9, 17,  2, 23,  3,  4, 12,  5, 18, 10,
         6, 20, 16,  7, 11, 13, 33, 32, 25, 27, 31, 29, 30, 24])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 11},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23, 12,  6,  0, 24, 10]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23, 12,  6,  0, 24, 10]), '_N_src': tensor([ 0, 10,  6, 23, 21,  4, 14, 15, 28, 29, 27])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23, 12,  6,  0, 24, 10]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23, 12,  6,  0, 24, 10]), '_N_src': tensor([ 0, 10,  6, 23, 21,  4, 14, 15, 28, 29, 27])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23, 12,  6,  0, 24, 10])
tensor([ 0,  2,  1, 13,  7, 19, 12,  5, 31, 29, 27])
tensor([ 7, 11, 13,  3,  1,  0, 33,  2])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=8, num_edges=15)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.123174

0  epoch,   batch 0 blocks edges
0  epoch,   batch 1 blocks edges
0  epoch,   batch 2 blocks edges
0  epoch,   batch 3 blocks edges
0  epoch,   batch 4 blocks edges
0  epoch,   batch 5 blocks edges
0  epoch,   batch 6 blocks edges
0  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 1.2742
----------------------------------------------------------pseudo_mini_loss sum 23.062171936035156
Epoch 1
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 26, 23,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 26, 23,  8])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([32, 33, 25,  0,  1])
tensor([15, 23, 21])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([14, 23,  6, 25, 11])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([14, 23,  6, 25, 11])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([ 5,  0,  2, 33,  3])
tensor([10,  9, 12])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 4, 20, 23,  8,  6])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 4, 20, 23,  8,  6])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 9, 13,  0,  1,  2])
tensor([ 2, 17,  1])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 25, 13, 23, 20])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 25, 13, 23, 20])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([32, 33,  6,  0, 13])
tensor([20,  4,  3])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([14, 13, 23, 12])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([14, 13, 23, 12])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([ 5,  6,  0, 16])
tensor([16,  6,  5])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=4, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 8, 25, 11,  6, 23])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 8, 25, 11,  6, 23])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([ 1, 33,  3,  2,  0])
tensor([19,  7, 11])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([24, 25, 23,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([24, 25, 23,  8])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([32, 33,  0,  1])
tensor([18,  8, 13])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([24, 25, 15, 13])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([24, 25, 15, 13])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([32, 33, 19,  6])
tensor([14, 22,  0])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 26, 23,  8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 26, 23,  8]), '_N_src': tensor([24, 25, 27, 23,  8, 29, 28, 19, 30, 31, 16,  3, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 26, 23,  8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 26, 23,  8]), '_N_src': tensor([24, 25, 27, 23,  8, 29, 28, 19, 30, 31, 16,  3, 15])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2, 24, 25, 26, 23,  8])
tensor([32, 33, 27,  0,  1, 31, 30,  8, 29, 24,  7, 10, 19])
tensor([15, 23, 21, 32, 33, 25,  0,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 12},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 14, 23,  6, 25, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 14, 23,  6, 25, 11]), '_N_src': tensor([23, 14,  6, 25, 11, 13,  3, 16,  8, 19, 30, 20])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 14, 23,  6, 25, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 14, 23,  6, 25, 11]), '_N_src': tensor([23, 14,  6, 25, 11, 13,  3, 16,  8, 19, 30, 20])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 14, 23,  6, 25, 11])
tensor([ 0,  5,  2, 33,  3,  6, 10,  7,  1,  8, 29, 13])
tensor([10,  9, 12,  5,  0,  2, 33,  3])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 7},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8,  4, 20, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8,  4, 20, 23]), '_N_src': tensor([ 8, 23, 16, 15,  6, 25,  3])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8,  4, 20, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8,  4, 20, 23]), '_N_src': tensor([ 8, 23, 16, 15,  6, 25,  3])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8,  4, 20, 23])
tensor([ 1,  0,  7, 19,  2, 33, 10])
tensor([ 2, 17,  1,  9, 13,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
-------------------------------------------
Block(num_src_nodes=10, num_dst_nodes=6, num_edges=12)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 25, 13, 23, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 25, 13, 23, 20]), '_N_src': tensor([24, 25,  3, 23, 20, 29, 28, 19, 30, 12, 14, 16,  6])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11, 24, 25, 13, 23, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11, 24, 25, 13, 23, 20]), '_N_src': tensor([24, 25,  3, 23, 20, 29, 28, 19, 30, 12, 14, 16,  6])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11, 24, 25, 13, 23, 20])
tensor([32, 33, 10,  0, 13, 31, 30,  8, 29, 16,  5,  7,  2])
tensor([20,  4,  3, 32, 33,  6,  0, 13])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 8},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 4, '_N_src': 5},
      num_dst_nodes={'_N_dst': 4, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 8},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 23]), '_N_src': tensor([14, 13, 12,  3, 16])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14, 23]), '_N_src': tensor([14, 13, 12,  3, 16])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14, 23])
tensor([ 5,  6, 16, 10,  7])
tensor([16,  6,  5,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5, 6, 7])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=4, num_edges=8)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 9},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  8, 25, 11,  6, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  8, 25, 11,  6, 23]), '_N_src': tensor([23,  8, 11, 16, 15, 19, 30, 20,  3])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17,  8, 25, 11,  6, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17,  8, 25, 11,  6, 23]), '_N_src': tensor([23,  8, 11, 16, 15, 19, 30, 20,  3])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17,  8, 25, 11,  6, 23])
tensor([ 0,  1,  3,  7, 19,  8, 29, 13, 10])
tensor([19,  7, 11,  1, 33,  3,  2,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=8, num_edges=15)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 24, 25, 23,  8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 24, 25, 23,  8]), '_N_src': tensor([24, 25, 28, 23,  6, 29, 19, 30, 16,  3, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20, 24, 25, 23,  8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20, 24, 25, 23,  8]), '_N_src': tensor([24, 25, 28, 23,  6, 29, 19, 30, 16,  3, 15])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20, 24, 25, 23,  8])
tensor([32, 33, 30,  0,  2, 31,  8, 29,  7, 10, 19])
tensor([18,  8, 13, 32, 33,  0,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25])
{'_ID': tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 23, 21, 10,  9, 12,  2, 17,  1, 20,  4,  3, 16,  6,  5, 19,  7, 11,
        18,  8, 13, 14, 22,  0, 32, 33, 25, 27, 30, 31, 29, 24])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 12},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23, 24, 25, 15, 13]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23, 24, 25, 15, 13]), '_N_src': tensor([24, 25, 16,  3, 29, 28, 19, 30, 23,  8, 12, 14])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23, 24, 25, 15, 13]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23, 24, 25, 15, 13]), '_N_src': tensor([24, 25, 16,  3, 29, 28, 19, 30, 23,  8, 12, 14])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23, 24, 25, 15, 13])
tensor([32, 33,  7, 10, 31, 30,  8, 29,  0,  1, 16,  5])
tensor([14, 22,  0, 32, 33, 19,  6])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.127855

1  epoch,   batch 0 blocks edges
1  epoch,   batch 1 blocks edges
1  epoch,   batch 2 blocks edges
1  epoch,   batch 3 blocks edges
1  epoch,   batch 4 blocks edges
1  epoch,   batch 5 blocks edges
1  epoch,   batch 6 blocks edges
1  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 0.0572
----------------------------------------------------------pseudo_mini_loss sum 20.076936721801758
Epoch 2
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 5,  7, 15,  2, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 5,  7, 15,  2, 24])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([ 5,  6,  0, 13, 33])
tensor([16,  2, 13])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([15, 16,  7, 21])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([15, 16,  7, 21])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([ 0,  3,  6, 10])
tensor([12,  4,  5])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 1, 24,  5,  4, 15, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 0, 1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 1, 24,  5,  4, 15, 25])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 2, 33,  5,  4,  0, 30])
tensor([9, 6, 1])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 3},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([26, 24, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([26, 24, 15])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([32, 33,  0])
tensor([14, 22, 19])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([15,  8, 27, 26,  1])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([15,  8, 27, 26,  1])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([ 0,  1, 25, 32,  2])
tensor([17, 23,  7])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([20,  3, 15,  2, 24,  1])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([20,  3, 15,  2, 24,  1])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([21, 12,  0, 13, 33,  2])
tensor([0, 3, 8])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([26, 24, 15,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([26, 24, 15,  8])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([32, 33,  0,  1])
tensor([15, 11, 21])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 28, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 5,  4, 26, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 5,  4, 26, 24])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([ 5,  4, 32, 33])
tensor([10, 18, 20])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2,  5,  7, 15, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2,  5,  7, 15, 24]), '_N_src': tensor([ 5,  7,  2, 14, 15, 16, 21,  0, 11, 30, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2,  5,  7, 15, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2,  5,  7, 15, 24]), '_N_src': tensor([ 5,  7,  2, 14, 15, 16, 21,  0, 11, 30, 29])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2,  5,  7, 15, 24])
tensor([ 5,  6, 13,  7,  0,  3, 10, 16, 19, 31, 29])
tensor([16,  2, 13,  5,  6,  0, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 15, 16,  7, 21]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 15, 16,  7, 21]), '_N_src': tensor([15, 16,  7, 21,  5, 11,  3, 14,  0,  4])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 15, 16,  7, 21]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 15, 16,  7, 21]), '_N_src': tensor([15, 16,  7, 21,  5, 11,  3, 14,  0,  4])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 15, 16,  7, 21])
tensor([ 0,  3,  6, 10,  5, 19, 12,  7, 16,  4])
tensor([12,  4,  5,  0,  3,  6, 10])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=10, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 9, '_N_src': 14},
      num_dst_nodes={'_N_dst': 9, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8,  1, 24,  5,  4, 15, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8,  1, 24,  5,  4, 15, 25]), '_N_src': tensor([ 1, 24,  0, 15, 25,  2, 14, 30, 29,  7, 21,  5, 11,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8,  1, 24,  5,  4, 15, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8,  1, 24,  5,  4, 15, 25]), '_N_src': tensor([ 1, 24,  0, 15, 25,  2, 14, 30, 29,  7, 21,  5, 11,  8])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8,  1, 24,  5,  4, 15, 25])
tensor([ 2, 33, 16,  0, 30, 13,  7, 31, 29,  6, 10,  5, 19,  1])
tensor([ 9,  6,  1,  2, 33,  5,  4,  0, 30])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=9, num_edges=18)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 9},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 12},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 26, 24, 15]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 26, 24, 15]), '_N_src': tensor([26, 24, 15, 22, 10, 30, 29,  5, 11])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11, 26, 24, 15]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11, 26, 24, 15]), '_N_src': tensor([26, 24, 15, 22, 10, 30, 29,  5, 11])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11, 26, 24, 15])
tensor([32, 33,  0, 18, 22, 31, 29,  5, 19])
tensor([14, 22, 19, 32, 33,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])
-------------------------------------------
Block(num_src_nodes=10, num_dst_nodes=6, num_edges=12)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 15,  8, 27, 26,  1]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 15,  8, 27, 26,  1]), '_N_src': tensor([15,  8, 28, 29,  5, 11, 25, 30, 13, 22, 10,  2, 14])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14, 15,  8, 27, 26,  1]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14, 15,  8, 27, 26,  1]), '_N_src': tensor([15,  8, 28, 29,  5, 11, 25, 30, 13, 22, 10,  2, 14])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14, 15,  8, 27, 26,  1])
tensor([ 0,  1, 27, 29,  5, 19, 30, 31, 23, 18, 22, 13,  7])
tensor([17, 23,  7,  0,  1, 25, 32,  2])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 11},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17, 20,  3,  2, 24,  1]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17, 20,  3,  2, 24,  1]), '_N_src': tensor([ 5, 11,  3, 14, 15, 25,  8, 16, 30, 29,  2])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17, 20,  3,  2, 24,  1]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17, 20,  3,  2, 24,  1]), '_N_src': tensor([ 5, 11,  3, 14, 15, 25,  8, 16, 30, 29,  2])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17, 20,  3,  2, 24,  1])
tensor([ 5, 19, 12,  7,  0, 30,  1,  3, 31, 29, 13])
tensor([ 0,  3,  8, 21, 12, 13, 33,  2])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=15, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 13},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 13},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 26, 24, 15,  8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 26, 24, 15,  8]), '_N_src': tensor([26, 24, 15,  8, 22, 10, 30, 29,  5, 11, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20, 26, 24, 15,  8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20, 26, 24, 15,  8]), '_N_src': tensor([26, 24, 15,  8, 22, 10, 30, 29,  5, 11, 25])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20, 26, 24, 15,  8])
tensor([32, 33,  0,  1, 18, 22, 31, 29,  5, 19, 30])
tensor([15, 11, 21, 32, 33,  0,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=7, num_edges=13)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 31, '_N_dst': 28},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25])
{'_ID': tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  2, 13, 12,  4,  5,  9,  6,  1, 14, 22, 19, 17, 23,  7,  0,  3,  8,
        15, 11, 21, 10, 18, 20, 33, 30, 32, 25, 27, 29, 31])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  5,  4, 26, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  5,  4, 26, 24]), '_N_src': tensor([ 4, 15, 26, 24,  7, 21, 22, 10, 30, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23,  5,  4, 26, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23,  5,  4, 26, 24]), '_N_src': tensor([ 4, 15, 26, 24,  7, 21, 22, 10, 30, 29])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23,  5,  4, 26, 24])
tensor([ 4,  0, 32, 33,  6, 10, 18, 22, 31, 29])
tensor([10, 18, 20,  5,  4, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.125371

2  epoch,   batch 0 blocks edges
2  epoch,   batch 1 blocks edges
2  epoch,   batch 2 blocks edges
2  epoch,   batch 3 blocks edges
2  epoch,   batch 4 blocks edges
2  epoch,   batch 5 blocks edges
2  epoch,   batch 6 blocks edges
2  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 0.0552
----------------------------------------------------------pseudo_mini_loss sum 8.835104942321777
Epoch 3
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 12,  9,  8, 19])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 12,  9,  8, 19])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([32, 33,  5,  6,  0,  1])
tensor([15, 16, 17])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([24, 25,  8, 13])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([24, 25,  8, 13])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([32, 33,  0, 13])
tensor([14,  8,  3])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 8, 24, 25, 17, 21])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([ 8, 24, 25, 17, 21])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 0, 32, 33, 10, 12])
tensor([11, 22,  0])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([ 8, 16, 20, 19, 24, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([ 8, 16, 20, 19, 24, 25])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([ 0,  4,  2,  1, 32, 33])
tensor([ 6,  7, 18])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([ 8,  1,  5, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([ 8,  1,  5, 25])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([ 0, 16,  3, 33])
tensor([ 5, 13, 19])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 8, 19,  9, 17, 12])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 8, 19,  9, 17, 12])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([ 0,  1,  6, 10,  5])
tensor([21,  4, 10])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([24, 25,  8, 15, 19])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([24, 25,  8, 15, 19])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([32, 33,  0, 21,  1])
tensor([20,  1,  2])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 8,  5, 20, 25, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 8,  5, 20, 25, 26])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([ 0,  3,  2, 33, 29])
tensor([12,  9, 23])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 9, '_N_src': 15},
      num_dst_nodes={'_N_dst': 9, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 12,  9,  8, 19]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 12,  9,  8, 19]), '_N_src': tensor([24, 25, 12,  9,  8, 19, 28, 29,  4, 26,  1, 16,  5, 14, 13])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 12,  9,  8, 19]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 12,  9,  8, 19]), '_N_src': tensor([24, 25, 12,  9,  8, 19, 28, 29,  4, 26,  1, 16,  5, 14, 13])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2, 24, 25, 12,  9,  8, 19])
tensor([32, 33,  5,  6,  0,  1, 31, 30,  8, 29, 16,  4,  3, 19, 13])
tensor([15, 16, 17, 32, 33,  5,  6,  0,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=9, num_edges=18)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 24, 25,  8, 13]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 24, 25,  8, 13]), '_N_src': tensor([24, 25, 20, 19, 21, 28, 29,  4, 26,  5])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 1, 1, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 0, 0, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 24, 25,  8, 13]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 24, 25,  8, 13]), '_N_src': tensor([24, 25, 20, 19, 21, 28, 29,  4, 26,  5])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 24, 25,  8, 13])
tensor([32, 33,  2,  1, 12, 31, 30,  8, 29,  3])
tensor([14,  8,  3, 32, 33,  0, 13])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 13},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 13},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 24, 25, 17, 21]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 24, 25, 17, 21]), '_N_src': tensor([ 8, 24, 25,  5, 19, 28, 29,  4, 26, 12])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 1, 0, 0, 1, 1, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 0, 0, 1, 1, 0, 0, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8, 24, 25, 17, 21]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8, 24, 25, 17, 21]), '_N_src': tensor([ 8, 24, 25,  5, 19, 28, 29,  4, 26, 12])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8, 24, 25, 17, 21])
tensor([ 0, 32, 33,  3,  1, 31, 30,  8, 29,  5])
tensor([11, 22,  0, 32, 33, 10, 12])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=7, num_edges=13)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 9, '_N_src': 14},
      num_dst_nodes={'_N_dst': 9, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11,  8, 16, 20, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11,  8, 16, 20, 19, 24, 25]), '_N_src': tensor([16, 12,  5,  8, 24, 25, 19,  9,  4, 14, 13, 28, 29, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11,  8, 16, 20, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11,  8, 16, 20, 19, 24, 25]), '_N_src': tensor([16, 12,  5,  8, 24, 25, 19,  9,  4, 14, 13, 28, 29, 26])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11,  8, 16, 20, 19, 24, 25])
tensor([ 4,  5,  3,  0, 32, 33,  1,  6,  8, 19, 13, 31, 30, 29])
tensor([ 6,  7, 18,  0,  4,  2,  1, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=9, num_edges=18)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 10},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14,  8,  1,  5, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14,  8,  1,  5, 25]), '_N_src': tensor([ 1,  8, 25,  5, 19, 12,  9, 21,  4, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14,  8,  1,  5, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14,  8,  1,  5, 25]), '_N_src': tensor([ 1,  8, 25,  5, 19, 12,  9, 21,  4, 26])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14,  8,  1,  5, 25])
tensor([16,  0, 33,  3,  1,  5,  6, 12,  8, 29])
tensor([ 5, 13, 19,  0, 16,  3, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 9},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  8, 19,  9, 12]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  8, 19,  9, 12]), '_N_src': tensor([ 8, 19,  9, 12,  5, 14, 13, 16,  1])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17,  8, 19,  9, 12]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17,  8, 19,  9, 12]), '_N_src': tensor([ 8, 19,  9, 12,  5, 14, 13, 16,  1])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17,  8, 19,  9, 12])
tensor([ 0,  1,  6,  5,  3, 19, 13,  4, 16])
tensor([21,  4, 10,  0,  1,  6,  5])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=11, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 24, 25,  8, 15]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 24, 25,  8, 15]), '_N_src': tensor([24, 25, 14, 13,  8,  4, 28, 29, 26,  5, 19])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20, 24, 25,  8, 15]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20, 24, 25,  8, 15]), '_N_src': tensor([24, 25, 14, 13,  8,  4, 28, 29, 26,  5, 19])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20, 24, 25,  8, 15])
tensor([32, 33, 19, 13,  0,  8, 31, 30, 29,  3,  1])
tensor([20,  1,  2, 32, 33,  0, 21])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 31, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29])
{'_ID': tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([15, 16, 17, 14,  8,  3, 11, 22,  0,  6,  7, 18,  5, 13, 19, 21,  4, 10,
        20,  1,  2, 12,  9, 23, 32, 33, 29, 27, 31, 30, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 11},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  8,  5, 20, 25, 26]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  8,  5, 20, 25, 26]), '_N_src': tensor([ 8,  5, 20, 25, 27, 26, 19, 21,  4, 30, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23,  8,  5, 20, 25, 26]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23,  8,  5, 20, 25, 26]), '_N_src': tensor([ 8,  5, 20, 25, 27, 26, 19, 21,  4, 30, 24])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23,  8,  5, 20, 25, 26])
tensor([ 0,  3,  2, 33, 27, 29,  1, 12,  8, 26, 32])
tensor([12,  9, 23,  0,  3,  2, 33, 29])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.123693

3  epoch,   batch 0 blocks edges
3  epoch,   batch 1 blocks edges
3  epoch,   batch 2 blocks edges
3  epoch,   batch 3 blocks edges
3  epoch,   batch 4 blocks edges
3  epoch,   batch 5 blocks edges
3  epoch,   batch 6 blocks edges
3  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 0.0503
----------------------------------------------------------pseudo_mini_loss sum 18.59943962097168
Epoch 4
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 1, 17, 13, 21, 24, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([ 1, 17, 13, 21, 24, 25])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([ 5,  6,  0, 10, 32, 33])
tensor([16,  5, 15])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 3},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([25, 13, 24])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([25, 13, 24])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([33,  0, 32])
tensor([13, 11, 20])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=6, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([19, 13, 15, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([19, 13, 15, 25])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 2,  0,  1, 33])
tensor([ 7, 19,  9])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 26, 13, 22, 21])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 26, 13, 22, 21])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([32, 29,  0,  3, 10])
tensor([23, 12,  4])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([24, 25, 19,  3, 13, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([24, 25, 19,  3, 13, 15])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([32, 33,  2, 13,  0,  1])
tensor([14,  0, 21])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([13,  7, 24, 25,  1])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([13,  7, 24, 25,  1])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([ 0, 19, 32, 33,  5])
tensor([ 1, 18,  6])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([13, 15, 24,  3, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([13, 15, 24,  3, 25])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([ 0,  1, 32, 13, 33])
tensor([17,  2,  8])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 27, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 1, 11,  3, 19, 24, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 1, 11,  3, 19, 24, 25])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([ 5,  4, 13,  2, 32, 33])
tensor([10,  3, 22])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=9, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 17, 13, 21, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 17, 13, 21, 24, 25]), '_N_src': tensor([ 1, 17, 21, 24, 25, 13, 11, 14,  4, 30, 29, 20, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2, 17, 13, 21, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2, 17, 13, 21, 24, 25]), '_N_src': tensor([ 1, 17, 21, 24, 25, 13, 11, 14,  4, 30, 29, 20, 26])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2, 17, 13, 21, 24, 25])
tensor([ 5,  6, 10, 32, 33,  0,  4, 21, 11, 31, 30,  8, 29])
tensor([16,  5, 15,  6,  0, 10, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=15, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 11},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 6, '_N_src': 10},
      num_dst_nodes={'_N_dst': 6, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 11},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 25, 13, 24]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 25, 13, 24]), '_N_src': tensor([13, 22, 24, 25, 20, 26, 14,  4, 30, 29])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 1, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 0, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 25, 13, 24]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 25, 13, 24]), '_N_src': tensor([13, 22, 24, 25, 20, 26, 14,  4, 30, 29])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 25, 13, 24])
tensor([ 0,  3, 32, 33,  8, 29, 21, 11, 31, 30])
tensor([13, 11, 20, 33,  0, 32])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
-------------------------------------------
Block(num_src_nodes=12, num_dst_nodes=6, num_edges=11)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 12},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 19, 13, 15, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 19, 13, 15, 25]), '_N_src': tensor([13, 15, 25, 19, 22, 28, 14,  4,  6,  3, 20, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8, 19, 13, 15, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8, 19, 13, 15, 25]), '_N_src': tensor([13, 15, 25, 19, 22, 28, 14,  4,  6,  3, 20, 26])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8, 19, 13, 15, 25])
tensor([ 0,  1, 33,  2,  3, 28, 21, 11,  7, 13,  8, 29])
tensor([ 7, 19,  9,  2,  0,  1, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 26, 13, 22, 21]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 26, 13, 22, 21]), '_N_src': tensor([24, 27, 13, 22, 21, 30, 29, 31, 14,  4, 19,  6, 11])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11, 24, 26, 13, 22, 21]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11, 24, 26, 13, 22, 21]), '_N_src': tensor([24, 27, 13, 22, 21, 30, 29, 31, 14,  4, 19,  6, 11])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11, 24, 26, 13, 22, 21])
tensor([32, 25,  0,  3, 10, 31, 30, 26, 21, 11,  2,  7,  4])
tensor([23, 12,  4, 32, 29,  0,  3, 10])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 14},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 24, 25, 19,  3, 15]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 24, 25, 19,  3, 15]), '_N_src': tensor([24, 25, 14,  4, 13, 15, 30, 29, 20, 26, 22, 28,  6,  3])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14, 24, 25, 19,  3, 15]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14, 24, 25, 19,  3, 15]), '_N_src': tensor([24, 25, 14,  4, 13, 15, 30, 29, 20, 26, 22, 28,  6,  3])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14, 24, 25, 19,  3, 15])
tensor([32, 33, 21, 11,  0,  1, 31, 30,  8, 29,  3, 28,  7, 13])
tensor([14,  0, 21, 32, 33,  2, 13,  1])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 15},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17, 13,  7, 24, 25,  1]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17, 13,  7, 24, 25,  1]), '_N_src': tensor([ 6,  3, 24, 25, 13, 11, 14,  4, 15, 30, 29, 20, 26, 21, 17])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17, 13,  7, 24, 25,  1]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17, 13,  7, 24, 25,  1]), '_N_src': tensor([ 6,  3, 24, 25, 13, 11, 14,  4, 15, 30, 29, 20, 26, 21, 17])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17, 13,  7, 24, 25,  1])
tensor([ 7, 13, 32, 33,  0,  4, 21, 11,  1, 31, 30,  8, 29, 10,  6])
tensor([ 1, 18,  6,  0, 19, 32, 33,  5])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=18, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 13},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 13, 15, 24,  3, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 13, 15, 24,  3, 25]), '_N_src': tensor([13, 15, 22, 28, 24, 29, 14,  4,  6,  3, 30, 20, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20, 13, 15, 24,  3, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20, 13, 15, 24,  3, 25]), '_N_src': tensor([13, 15, 22, 28, 24, 29, 14,  4,  6,  3, 30, 20, 26])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20, 13, 15, 24,  3, 25])
tensor([ 0,  1,  3, 28, 32, 30, 21, 11,  7, 13, 31,  8, 29])
tensor([17,  2,  8,  0,  1, 32, 13, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 32, '_N_dst': 27},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29])
{'_ID': tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 1, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 0, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([16,  5, 15, 13, 11, 20,  7, 19,  9, 23, 12,  4, 14,  0, 21,  1, 18,  6,
        17,  2,  8, 10,  3, 22, 32, 33, 29, 25, 28, 30, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 9, '_N_src': 14},
      num_dst_nodes={'_N_dst': 9, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 18},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  1, 11,  3, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  1, 11,  3, 19, 24, 25]), '_N_src': tensor([13, 11, 19,  6, 24, 25, 21, 17, 22, 28, 30, 29, 20, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23,  1, 11,  3, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23,  1, 11,  3, 19, 24, 25]), '_N_src': tensor([13, 11, 19,  6, 24, 25, 21, 17, 22, 28, 30, 29, 20, 26])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23,  1, 11,  3, 19, 24, 25])
tensor([ 0,  4,  2,  7, 32, 33, 10,  6,  3, 28, 31, 30,  8, 29])
tensor([10,  3, 22,  5,  4, 13,  2, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=9, num_edges=18)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.126613

4  epoch,   batch 0 blocks edges
4  epoch,   batch 1 blocks edges
4  epoch,   batch 2 blocks edges
4  epoch,   batch 3 blocks edges
4  epoch,   batch 4 blocks edges
4  epoch,   batch 5 blocks edges
4  epoch,   batch 6 blocks edges
4  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 0.0556
----------------------------------------------------------pseudo_mini_loss sum 10.810197830200195
Epoch 5
now we generate block from output to src direction, bottom up direction
The real block id is  1
block_to_graph.srcdata
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
layer  1
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 14, 19, 21])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([0, 1, 2]), '_N_src': tensor([24, 25, 14, 19, 21])}
layer_src[BB.srcdata[_ID]]
tensor([0, 1, 2])
tensor([32, 33,  2,  0,  7])
tensor([20,  9,  3])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([19,  2, 15, 20,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([3, 4, 5]), '_N_src': tensor([19,  2, 15, 20,  8])}
layer_src[BB.srcdata[_ID]]
tensor([3, 4, 5])
tensor([ 0,  3, 10,  5,  6])
tensor([12,  4, 16])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([18, 25, 24, 19,  4])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([6, 7, 8]), '_N_src': tensor([18, 25, 24, 19,  4])}
layer_src[BB.srcdata[_ID]]
tensor([6, 7, 8])
tensor([ 1, 33, 32,  0,  4])
tensor([19, 14,  6])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 25, 26, 19])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11]), '_N_src': tensor([24, 25, 26, 19])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11])
tensor([32, 33, 29,  0])
tensor([18, 23,  8])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 4},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([19, 18,  2, 27])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14]), '_N_src': tensor([19, 18,  2, 27])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14])
tensor([ 0,  1,  3, 27])
tensor([17, 13,  2])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=7, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 5},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 4, 20, 24, 25, 19])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17]), '_N_src': tensor([ 4, 20, 24, 25, 19])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17])
tensor([ 4,  5, 32, 33,  0])
tensor([10, 22, 11])
eid connect check result
tensor([True, True, True, True, True])
tensor([0, 1, 2, 3, 4])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=5)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 6},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([28, 12, 18,  6,  5,  8])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20]), '_N_src': tensor([28, 12, 18,  6,  5,  8])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20])
tensor([30, 17,  1, 19, 16,  6])
tensor([1, 0, 5])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 29, '_N_dst': 24},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
       dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
block-------
Block(num_src_nodes={'_N_dst': 3, '_N_src': 5},
      num_dst_nodes={'_N_dst': 3, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 6},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 2, 18, 19, 24, 25])}, 'test_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23]), '_N_src': tensor([ 2, 18, 19, 24, 25])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23])
tensor([ 3,  1,  0, 32, 33])
tensor([ 7, 21, 15])
eid connect check result
tensor([True, True, True, True, True, True])
tensor([0, 1, 2, 3, 4, 5])
-------------------------------------------
Block(num_src_nodes=8, num_dst_nodes=3, num_edges=6)
generate_blocks_for_one_layer function ------ batch:  7
The real block id is  0
block_to_graph.srcdata
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
num of batch  8
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 12},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 14, 19, 21]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 0,  1,  2, 24, 25, 14, 19, 21]), '_N_src': tensor([24, 25, 14,  3, 30, 28, 11, 26, 21, 13, 15, 18])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 14, 19, 21]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 0,  1,  2, 24, 25, 14, 19, 21]), '_N_src': tensor([24, 25, 14,  3, 30, 28, 11, 26, 21, 13, 15, 18])}
layer_src[BB.srcdata[_ID]]
tensor([ 0,  1,  2, 24, 25, 14, 19, 21])
tensor([32, 33,  2, 12, 31, 30,  8, 29,  7, 13, 10,  1])
tensor([20,  9,  3, 32, 33,  2,  0,  7])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  0
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 9},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 19,  2, 15, 20,  8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 3,  4,  5, 19,  2, 15, 20,  8]), '_N_src': tensor([19,  2, 15, 20,  8, 13,  3, 14,  4])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 3,  4,  5, 19,  2, 15, 20,  8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 3,  4,  5, 19,  2, 15, 20,  8]), '_N_src': tensor([19,  2, 15, 20,  8, 13,  3, 14,  4])}
layer_src[BB.srcdata[_ID]]
tensor([ 3,  4,  5, 19,  2, 15, 20,  8])
tensor([ 0,  3, 10,  5,  6, 13, 12,  2,  4])
tensor([12,  4, 16,  0,  3, 10,  5,  6])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=10, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  1
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 14},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 18, 25, 24, 19,  4]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 6,  7,  8, 18, 25, 24, 19,  4]), '_N_src': tensor([19, 18, 24, 25,  4, 20,  2, 22, 11, 26, 30, 28, 13, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 6,  7,  8, 18, 25, 24, 19,  4]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 6,  7,  8, 18, 25, 24, 19,  4]), '_N_src': tensor([19, 18, 24, 25,  4, 20,  2, 22, 11, 26, 30, 28, 13, 15])}
layer_src[BB.srcdata[_ID]]
tensor([ 6,  7,  8, 18, 25, 24, 19,  4])
tensor([ 0,  1, 32, 33,  4,  5,  3, 21,  8, 29, 31, 30, 13, 10])
tensor([19, 14,  6,  1, 33, 32,  0,  4])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=17, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  2
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 25, 26, 19]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([ 9, 10, 11, 24, 25, 26, 19]), '_N_src': tensor([24, 25, 29, 19, 30, 28, 11, 26, 31, 13, 15])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([ 9, 10, 11, 24, 25, 26, 19]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([ 9, 10, 11, 24, 25, 26, 19]), '_N_src': tensor([24, 25, 29, 19, 30, 28, 11, 26, 31, 13, 15])}
layer_src[BB.srcdata[_ID]]
tensor([ 9, 10, 11, 24, 25, 26, 19])
tensor([32, 33, 25,  0, 31, 30,  8, 29, 26, 13, 10])
tensor([18, 23,  8, 32, 33, 29,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  3
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 7, '_N_src': 11},
      num_dst_nodes={'_N_dst': 7, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 14},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 19, 18,  2, 27]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([12, 13, 14, 19, 18,  2, 27]), '_N_src': tensor([19, 18, 25,  2, 21, 11, 13, 15, 22,  3, 14])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([12, 13, 14, 19, 18,  2, 27]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([12, 13, 14, 19, 18,  2, 27]), '_N_src': tensor([19, 18, 25,  2, 21, 11, 13, 15, 22,  3, 14])}
layer_src[BB.srcdata[_ID]]
tensor([12, 13, 14, 19, 18,  2, 27])
tensor([ 0,  1, 33,  3,  7,  8, 13, 10, 21, 12,  2])
tensor([17, 13,  2,  0,  1,  3, 27])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=7, num_edges=14)
generate_blocks_for_one_layer function ------ batch:  4
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 10},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 15},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  4, 20, 24, 25, 19]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([15, 16, 17,  4, 20, 24, 25, 19]), '_N_src': tensor([19,  4, 24, 25, 15, 30, 28, 11, 26, 13])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 1, 1, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 1, 1, 0, 1, 1, 0, 1, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 0, 0, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 0, 0, 1, 0, 0, 1, 0, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([15, 16, 17,  4, 20, 24, 25, 19]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([15, 16, 17,  4, 20, 24, 25, 19]), '_N_src': tensor([19,  4, 24, 25, 15, 30, 28, 11, 26, 13])}
layer_src[BB.srcdata[_ID]]
tensor([15, 16, 17,  4, 20, 24, 25, 19])
tensor([ 0,  4, 32, 33, 10, 31, 30,  8, 29, 13])
tensor([10, 22, 11,  4,  5, 32, 33,  0])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
-------------------------------------------
Block(num_src_nodes=13, num_dst_nodes=8, num_edges=15)
generate_blocks_for_one_layer function ------ batch:  5
Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 10},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 28, 12,  6,  5,  8]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([18, 19, 20, 28, 12,  6,  5,  8]), '_N_src': tensor([ 2, 22, 13, 15, 19, 18, 24, 20,  8,  4])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 1, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 1, 0, 0, 0], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 0, 1, 1, 1, 1], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 1, 1, 1, 0, 1, 1, 1], dtype=torch.uint8)}})
{'_N_dst': tensor([18, 19, 20, 28, 12,  6,  5,  8]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([18, 19, 20, 28, 12,  6,  5,  8]), '_N_src': tensor([ 2, 22, 13, 15, 19, 18, 24, 20,  8,  4])}
layer_src[BB.srcdata[_ID]]
tensor([18, 19, 20, 28, 12,  6,  5,  8])
tensor([ 3, 21, 13, 10,  0,  1, 32,  5,  6,  4])
tensor([ 1,  0,  5, 30, 17, 19, 16,  6])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=14, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  6

Graph(num_nodes={'_N_src': 32, '_N_dst': 29},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30])
{'_ID': tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26]), 'test_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 0], dtype=torch.uint8), 'val_mask': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1], dtype=torch.uint8), 'train_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}
tensor([20,  9,  3, 12,  4, 16, 19, 14,  6, 18, 23,  8, 17, 13,  2, 10, 22, 11,
         1,  0,  5,  7, 21, 15, 32, 33, 29, 27, 30, 25, 31, 26])
block-------
Block(num_src_nodes={'_N_dst': 8, '_N_src': 14},
      num_dst_nodes={'_N_dst': 8, '_N_src': 0},
      num_edges={('_N_src', '_E', '_N_dst'): 16},
      metagraph=[('_N_src', '_N_dst', '_E')])
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  2, 18, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([], dtype=torch.uint8)}})
defaultdict(<class 'dict'>, {'_ID': {'_N_dst': tensor([21, 22, 23,  2, 18, 19, 24, 25]), '_N_src': tensor([18, 14, 19, 24, 25,  3,  2, 22, 13, 15, 30, 28, 11, 26])}, 'test_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 1, 1], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], dtype=torch.uint8)}, 'val_mask': {'_N_dst': tensor([0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8), '_N_src': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=torch.uint8)}, 'train_mask': {'_N_dst': tensor([1, 1, 1, 1, 1, 1, 0, 0], dtype=torch.uint8), '_N_src': tensor([1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], dtype=torch.uint8)}})
{'_N_dst': tensor([21, 22, 23,  2, 18, 19, 24, 25]), '_N_src': tensor([], dtype=torch.int64)}
{'_N_dst': tensor([21, 22, 23,  2, 18, 19, 24, 25]), '_N_src': tensor([18, 14, 19, 24, 25,  3,  2, 22, 13, 15, 30, 28, 11, 26])}
layer_src[BB.srcdata[_ID]]
tensor([21, 22, 23,  2, 18, 19, 24, 25])
tensor([ 1,  2,  0, 32, 33, 12,  3, 21, 13, 10, 31, 30,  8, 29])
tensor([ 7, 21, 15,  3,  1,  0, 32, 33])
eid connect check result
tensor([True, True, True, True, True, True, True, True, True, True, True, True,
        True, True, True, True])
tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])
-------------------------------------------
Block(num_src_nodes=16, num_dst_nodes=8, num_edges=16)
generate_blocks_for_one_layer function ------ batch:  7

----main run function: block dataloader generation total  spend:  0.123438

5  epoch,   batch 0 blocks edges
5  epoch,   batch 1 blocks edges
5  epoch,   batch 2 blocks edges
5  epoch,   batch 3 blocks edges
5  epoch,   batch 4 blocks edges
5  epoch,   batch 5 blocks edges
5  epoch,   batch 6 blocks edges
5  epoch,   batch 7 blocks edges
current Epoch training on CPU with block data loading Time(s): 0.0431
----------------------------------------------------------pseudo_mini_loss sum 21.384153366088867

====================================================================================================
train Acc: 0.666667
Test Acc: 0.400000
[[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], [0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]]
